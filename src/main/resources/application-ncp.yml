# NCP 클러스터 환경용 설정
# Kubernetes 클러스터 내부의 독립적인 MySQL 컨테이너 사용

spring:
  datasource:
    # NCP Kubernetes 클러스터 내부 MySQL 서비스
    url: jdbc:mysql://mysql-service.tuk-trainee12.svc.cluster.local:3306/mini_carrot_user?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&connectTimeout=60000&socketTimeout=60000&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: carrot_user
    password: CarrotPass#2024
    driver-class-name: com.mysql.cj.jdbc.Driver
    
    # 커넥션 풀 설정 (안정성 강화)
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 60000      # 60초로 증가
      idle-timeout: 300000           # 5분
      max-lifetime: 1800000          # 30분으로 증가
      validation-timeout: 5000       # 검증 타임아웃
      leak-detection-threshold: 60000 # 연결 누수 감지
      # 연결 검증 쿼리
      connection-test-query: SELECT 1
      # 연결 초기화 실패 시 빠른 실패 비활성화
      initialization-fail-timeout: -1
      
  jpa:
    hibernate:
      ddl-auto: update  # 테이블 자동 생성/업데이트
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQLDialect
        # 성능 최적화
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        # 연결 관련 설정
        connection:
          provider_disables_autocommit: true
    database: mysql
    
  # RabbitMQ 설정 (클러스터 내부) - 연결 안정성 강화
  rabbitmq:
    host: rabbitmq-service.tuk-trainee12.svc.cluster.local
    port: 5672
    username: carrot_user
    password: CarrotPass#2024
    virtual-host: /
    # 연결 재시도 설정
    connection-timeout: 60000
    # 템플릿 설정
    template:
      retry:
        enabled: true
        initial-interval: 1000
        max-attempts: 3
        max-interval: 10000
        multiplier: 2.0

# JWT 설정 (운영환경용 강화)
jwt:
  secret: ${JWT_SECRET:ncp-mini-carrot-super-secure-jwt-secret-key-2024-production-environment}
  expiration: ${JWT_EXPIRATION:86400000}  # 24시간

# NCP 환경 로깅
logging:
  level:
    com.minicarrot.user: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    com.zaxxer.hikari: DEBUG  # HikariCP 로그 활성화
    org.springframework.retry: DEBUG  # 재시도 로그
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# 외부 서비스 연동 설정
app:
  product-service:
    url: ${PRODUCT_SERVICE_URL:http://product-service.tuk-trainee12.svc.cluster.local:8081}
  external-api:
    timeout: ${EXTERNAL_API_TIMEOUT:10}

# 모니터링 설정 (NCP 최적화)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
      # 데이터베이스 헬스체크 설정
      db:
        enabled: true
      # 디스크 공간 체크
      diskspace:
        enabled: true
        threshold: 10MB
  # 헬스 인디케이터 설정
  health:
    # 데이터베이스 연결 체크 강화
    db:
      enabled: true
    # 디스크 공간 체크
    diskspace:
      enabled: true
      threshold: 10485760  # 10MB
  metrics:
    export:
      prometheus:
        enabled: true
        step: 60s
    tags:
      application: mini-carrot-user-service
      environment: ncp

# 서버 설정
server:
  port: 8080
  servlet:
    context-path: /
  # NCP 로드밸런서를 위한 설정
  forward-headers-strategy: native
  # 연결 타임아웃 설정
  tomcat:
    connection-timeout: 60000
    keep-alive-timeout: 60000 